import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
def cfg = rootProject.ext.android
def ddf = rootProject.ext.defDependencied
android {
    compileSdkVersion cfg.sdkVersion
    defaultConfig {
        applicationId "qianxing.taojinke"
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode 20191214
        versionName "6.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    buildToolsVersion cfg.buildToolsVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.0.0-alpha1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    compileOnly ddf.appcompat
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(path: ':lib-base')
    implementation project(path: ':lib-kernel')
    implementation project(path: ':lib-weight')
    implementation project(path: ':lib-core')
    implementation ddf.dagger
    annotationProcessor ddf.daggerCompiler
    implementation ddf.arouterApi
    annotationProcessor ddf.arouterCompiler
    implementation 'com.android.support:support-v4:28.0.0'
    //implementation 'net.sf.json-lib:json-lib:2.4:jdk15'
    implementation ddf.butterknife
    annotationProcessor ddf.butterknifeCompiler
    implementation ddf.rxJava
    implementation ddf.rxAndroid
    compileOnly ddf.andPermission
    compileOnly ddf.fastjson

    implementation ddf.log


}

afterEvaluate {
    tasks.matching {
        // 打包操作的时候
        (it.name.startsWith('assemble'))
    }.each { task ->
        //获取任务构建类型
        def taskBuildType = task.name.substring(8).toLowerCase()
        //打印
        println(taskBuildType)

        //如果任务构建类型为release
        if (taskBuildType.contains('release')) {
            task.dependsOn(setReleaseVersionCode, generateReleaseLibraryAssets)
        } else {
            //默认为debug
            task.dependsOn(generateDebugModuleJson)
        }
    }
}

task setReleaseVersionCode() {
    doFirst {
        SimpleDateFormat format = new SimpleDateFormat("yyMMdd")
        String dt = format.format(new Date())
        android.defaultConfig.versionCode = Integer.valueOf(dt + "101")
    }
}
task generateReleaseLibraryAssets() {

    doFirst {
        generateLibraryJson('release')
    }
}

/**
 * 创建debug版本的library.json
 * 输出路径 src/debug/assets/library.json
 */
task generateDebugModuleJson() {
    doFirst {
        generateLibraryJson('debug')
    }
}

class Book {
    String name;
    String path;
}

def generateLibraryJson(String buildType) {

    def applicationPath = ["/train/application/like", "/chat/application/like", "/mine/application/like"]
//    file("src/$buildType/assets/library.json")
//            .withWriter('UTF-8') { within ->
//        within.write(object.toString())
//    }
}
